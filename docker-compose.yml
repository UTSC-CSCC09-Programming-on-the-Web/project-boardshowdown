services:
  nginx-proxy:
    image: jwilder/nginx-proxy
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./certs:/etc/nginx/certs
      - ./vhost:/etc/nginx/vhost.d
      - ./html:/usr/share/nginx/html
    restart: always
    networks:
      - web

  nginx-proxy-acme:
    image: nginxproxy/acme-companion
    container_name: nginx-proxy-acme
    depends_on:
      - nginx-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/etc/nginx/certs
      - ./vhost:/etc/nginx/vhost.d
      - ./html:/usr/share/nginx/html
      - ./acme:/etc/acme.sh
    env_file:
      - .env.production
    environment:
      - DEFAULT_EMAIL=${EMAIL}
      - NGINX_PROXY_CONTAINER=nginx-proxy
    restart: always
    networks:
      - web

  backend:
    image: ghcr.io/utsc-cscc09-programming-on-the-web/backend-boardshowdown:feat-deploy
    container_name: backend-boardshowdown
    env_file:
      - .env.production
    environment:
      - NODE_ENV=${NODE_ENV}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - VIRTUAL_HOST=${BACKEND_HOST}
      - LETSENCRYPT_HOST=${BACKEND_HOST}
      - LETSENCRYPT_EMAIL=${EMAIL}
    expose:
      - 3000
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - web
      - db

  frontend:
    image: ghcr.io/utsc-cscc09-programming-on-the-web/frontend-boardshowdown:feat-deploy
    container_name: frontend-boardshowdown
    env_file:
      - .env.production
    environment:
      - VIRTUAL_HOST=${FRONTEND_HOST}
      - LETSENCRYPT_HOST=${FRONTEND_HOST}
      - LETSENCRYPT_EMAIL=${EMAIL}
    expose:
      - 80
    restart: always
    networks:
      - web

  postgres:
    image: postgres:15
    container_name: postgres
    env_file:
      - .env.production
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - db

  yjs:
    image: ghcr.io/utsc-cscc09-programming-on-the-web/yjs-boardshowdown:feat-deploy
    container_name: yjs-boardshowdown
    env_file:
      - .env.production
    environment:
      - VIRTUAL_HOST=${YJS_HOST}
      - LETSENCRYPT_HOST=${YJS_HOST}
      - LETSENCRYPT_EMAIL=${EMAIL}
    expose:
      - 12345
    restart: unless-stopped
    networks:
      - web

volumes:
  postgres_data:

networks:
  web:
    driver: bridge
  db:
    driver: bridge
    internal: true